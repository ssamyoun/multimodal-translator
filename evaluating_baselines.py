# -*- coding: utf-8 -*-
"""GAN_translation_error.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PmxNNPWFcVxQ5hkzGWhfPgNPTyR9sGUP
"""

# Commented out IPython magic to ensure Python compatibility.
import os, sys
import pickle
import numpy as np
import pandas as pd
import scipy.signal as scisig
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')
TRANS_DATA_PATH = "/content/drive/My Drive/Colab Notebooks/WESAD_processed data/Processed/"
ORIG_DATA_PATH = "/content/drive/My Drive/Colab Notebooks/WESAD_processed data/"

def butter_lowpass(cutoff, fs, order=5):
    # Filtering Helper functions
    nyq = 0.5 * fs
    normal_cutoff = cutoff / nyq
    b, a = scisig.butter(order, normal_cutoff, btype='low', analog=False)
    return b, a

def butter_lowpass_filter(data, cutoff, fs, order=5):
    # Filtering Helper functions
    b, a = butter_lowpass(cutoff, fs, order=order)
    y = scisig.lfilter(b, a, data)
    return y

def get_eda(subj):
  trans_eda_file = TRANS_DATA_PATH + 'tEDA_S' + str(subj) + '.pkl'
  orig_eda_file = ORIG_DATA_PATH + 'S' + str(subj) + '.pkl'
  with open(trans_eda_file, 'rb') as file:
        trans_data = pickle.load(file, encoding='latin1')
        teda = trans_data['tEDA']
        ln = teda.shape[0]
        with open(orig_eda_file, 'rb') as file:
            orig_data = pickle.load(file, encoding='latin1')
            oeda = orig_data['signal']['chest']['EDA'][::175,:]
            oeda = butter_lowpass_filter(oeda, 1.0, 4, 6)
            oeda = oeda[:ln]
            return (teda, oeda)

def get_ecg(subj):
  trans_eda_file = TRANS_DATA_PATH + 'tECG_S' + str(subj) + '.pkl'
  orig_eda_file = ORIG_DATA_PATH + 'S' + str(subj) + '.pkl'
  with open(trans_eda_file, 'rb') as file:
        trans_data = pickle.load(file, encoding='latin1')
        teda = trans_data['tECG']
        ln = teda.shape[0]
        with open(orig_eda_file, 'rb') as file:
            orig_data = pickle.load(file, encoding='latin1')
            oeda = orig_data['signal']['chest']['ECG'][::175,:]
            #oeda = butter_lowpass_filter(oeda, 1.0, 4, 6)
            oeda = oeda[:ln]
            return (teda, oeda)

all_subject_ids = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17]
#for subj in all_subject_ids:
subj = 4
trans_data, orig_data = get_ecg(subj)
print(trans_data.shape, orig_data.shape)

a = [1,4,6]
b = [1,2,3]
print(pearsonr(a,b))
print(np.corrcoef(a,b))

##FIND OUT ERROR
from scipy.stats.stats import pearsonr
from sklearn.metrics import mean_squared_error, mean_absolute_error
from scipy.stats import linregress
from statsmodels.tsa.stattools import ccf

all_subject_ids = [2] #[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17]
for subj in all_subject_ids:
  trans_data, orig_data = get_ecg(subj)
  mae = mean_absolute_error(orig_data, trans_data)
  print("\n MAE:",subj, mae)
  print(np.corrcoef(orig_data.flatten(), trans_data.flatten())[0,1])
  print(pearsonr(orig_data.flatten(), trans_data.flatten()))
  #print(linregress(orig_data.flatten(), trans_data.flatten()))
  print(ccf(orig_data.flatten(), trans_data.flatten(),unbiased=True))

for subj in all_subject_ids:
  trans_data, orig_data = get_eda(subj)
  mae = mean_absolute_error(orig_data, trans_data)
  print("\n MAE:",subj, mae)
  print(np.corrcoef(orig_data.flatten(), trans_data.flatten())[1,0])
  print(pearsonr(orig_data.flatten(), trans_data.flatten()))

fig = plt.figure(figsize=(200, 10))
ax = plt.subplot(111)
plt.plot(trans_data[0:1000])
plt.show()

fig = plt.figure(figsize=(200, 10))
ax = plt.subplot(111)
plt.plot(orig_data[0:1000])
plt.show()

s
print(max(orig_data), min(orig_data))
print(max(trans_data), min(trans_data))

#aa = np.where((orig_data >= -0.60) & (orig_data <= -0.30))
#print(len(aa))

orig_data

for i in range(-60, 150, 30):
  j = i + 30
  si = float(i/100)
  ei = float(j/100)
  arr_actual = len(list(x for x in orig_data if si <= x <= ei))
  arr_trans = len(list(x for x in trans_data if si <= x <= ei))
  print(f'From {si} to {ei} => Original={arr_actual}, Translated={arr_trans}')

for i in range(-60, 150, 30):
  j = i + 30
  si = float(i/100)
  ei = float(j/100)
  arr_actual = len(list(x for x in orig_data if si <= x <= ei))
  arr_trans = len(list(x for x in trans_data if si <= x <= ei))
  print(f'From {si} to {ei} => Original={arr_actual}, Translated={arr_trans}')

#ECG
From -0.6 to -0.3 => Original=431, Translated=47
From -0.3 to 0.0 => Original=5100, Translated=5484
From 0.0 to 0.3 => Original=2398, Translated=3059
From 0.3 to 0.6 => Original=394, Translated=14
From 0.6 to 0.9 => Original=42, Translated=1
From 0.9 to 1.2 => Original=24, Translated=0
From 1.2 to 1.5 => Original=231, Translated=0